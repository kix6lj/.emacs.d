#+TITLE: Emacs Configuration
#+AUTHOR: kix6

* File local settings
- enable lexical-binding
  #+begin_src emacs-lisp :comments no :tangle yes
    ;; -*- lexical-binding: t -*-
  #+end_src
* Development
** Git

** Eglot
Base eglot with eldoc echo area limited to one line
#+begin_src emacs-lisp
  (use-package eglot
    :hook
    ((rust-ts-mode python-ts-mode c-ts-mode c++-ts-mode) . eglot-ensure)

    :config
    (setq eldoc-echo-area-use-multiline-p nil)
    (setq eglot-events-buffer-size 0))
#+end_src

*** Eglot with TRAMP
When specifying the remote lsp server, the remote prefix such as ~sshx:server~ is not needed.

*** Eglot with Pyright
Pyright needs to know the virtual environment. So we need to set ~pyrightconfig.json~, with ~venvPath~ be the folder of all venvs and ~venv~ be the venv name. The actual path will be ~venvPath/venv~.

The following code add capability for creating ~pyrightconfig.json~ from a given path
#+begin_src emacs-lisp
  (defun create-pyright-config (base-dir venv-path)
    "Create pyrightconfig.json in the given project base directory using
  the given venv path"
    (interactive (list
                  (read-directory-name "Project base: ")
                  (read-directory-name "VENV: ")))
    (let* (
           (venv-dir (tramp-file-local-name (file-truename venv-path)))
           (venv-file-name (directory-file-name venv-dir))
           (venvPath (file-name-directory venv-file-name))
           (venv (file-name-base venv-file-name))
           (out-file (expand-file-name "pyrightconfig.json" base-dir))
           (out-contents (json-encode (list :venvPath venvPath :venv venv))))
      (with-temp-file out-file (insert out-contents))))
#+end_src

*** TODO Support ~base-dir~ that is not a git-root
  
** Completion
Using ~company~ for completion
#+begin_src emacs-lisp
  (use-package company
    :after eglot
    :hook ((python-ts-mode c-ts-mode c++-ts-mode) . company-mode)
    :bind
    (:map company-active-map
          ("<tab>" . company-complete-selection))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.1)
    (company-show-numbers t)
    (company-tooltip-limit 20))

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src

** Languages
*** Python
Creating ~pyrightconfig.json~ for pyright
#+begin_src emacs-lisp
  (defun pyrightconfig-write (virtualenv)
    (interactive "DEnv: ")

    (let* (;; file-truename and tramp-file-local-name ensure that neither `~' nor
           ;; the Tramp prefix (e.g. "/ssh:my-host:") wind up in the final
           ;; absolute directory path.
           (venv-dir (tramp-file-local-name (file-truename virtualenv)))

           ;; Given something like /path/to/.venv/, this strips off the trailing `/'.
           (venv-file-name (directory-file-name venv-dir))

           ;; Naming convention for venvPath matches the field for
           ;; pyrightconfig.json.  `file-name-directory' gets us the parent path
           ;; (one above .venv).
           (venvPath (file-name-directory venv-file-name))

           ;; Grabs just the `.venv' off the end of the venv-file-name.
           (venv (file-name-base venv-file-name))

           ;; Eglot demands that `pyrightconfig.json' is in the project root
           ;; folder.
           (base-dir (vc-git-root default-directory))
           (out-file (expand-file-name "pyrightconfig.json" base-dir))

           ;; Finally, get a string with the JSON payload.
           (out-contents (json-encode (list :venvPath venvPath :venv venv))))

      ;; Emacs uses buffers for everything.  This creates a temp buffer, inserts
      ;; the JSON payload, then flushes that content to final `pyrightconfig.json'
      ;; location
      (with-temp-file out-file (insert out-contents))))
#+end_src
** Remote development
Using ~tramp~ for remote development.
#+begin_src emacs-lisp
  (use-package tramp
    :config
    (when (eq system-type 'windows-nt)
      (progn
        (dolist (method tramp-methods)
          (if (string= "ssh"
                       (cadr (assoc 'tramp-login-program (cdr method))))
              (push '("-tt")
                    (cadr (assoc 'tramp-login-args
                                 method)))
            nil))
        (prefer-coding-system 'utf-8-unix)))
    (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
    )
#+end_src

** Magit
Using ~magit~ to interact with ~git~. Shortcut is ~C-g~.
#+begin_src emacs-lisp
  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

** Treesit
Use treesit for major modes
#+begin_src emacs-lisp
  (use-package treesit-auto
    :custom
    (treesit-auto-install 'prompt)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))
#+end_src

* Org-mode
** Fonts
#+begin_src emacs-lisp
  (defun org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.0)
                    (org-level-6 . 1.0)
                    (org-level-7 . 1.0)
                    (org-level-8 . 1.0)))
      (set-face-attribute (car face) nil :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+end_src

** org-mode settings
Inlcuding ~org-contrib~ packages
#+begin_src emacs-lisp
  (use-package org-contrib)
  (use-package ledger-mode)
#+end_src

Configuring ~org-mode~ keybindings
| key         | function         |
|-------------+------------------|
| ~M-S-<right>~ | insert column    |
| ~M-S-<left>~  | delete column    |
| ~M-S-<up>~    | kill row         |
| ~C-c c~       | Capture template |

#+begin_src emacs-lisp
        (defun org-mode-setup ()
          (org-indent-mode)
          (variable-pitch-mode 1)
          (auto-fill-mode 0)
          (visual-line-mode 1))

        (use-package org
          :hook (org-mode . org-mode-setup)
          :hook (org-mode . org-font-setup)
          :bind
          (:map org-mode-map
                ("M-S-<right>" . org-table-insert-column)
                ("M-S-<left>" . org-table-delete-column)
                ("M-S-<up>" . org-table-kill-row))

          :config
          (setq org-ellipsis " ▾"
                org-hide-emphasis-markers t)

          (setq org-agenda-start-with-log-mode t)
          (setq org-log-done 'time)
          (setq org-log-into-drawer t)

          (require 'org-habit)

          (setq org-agenda-files
                '("~/GTD/inbox.org"
                  "~/GTD/gtd.org"
                  "~/GTD/tickler.org"))


          (setq org-todo-keywords
                '((sequence "TODO(t)" "NEXT(n)" "WAITING(w)" "WIP(p!)" "|" "DONE(d!)" "CANCLED(c)")))

          (setq org-todo-keyword-faces
                '(("TODO" . "red") ("WIP" . "yellow")
                  ("CANCELED" . "orange")
                  ("DONE" . "green")))
    
          (setq org-refile-targets
                '(("~/GTD/gtd.org" :maxlevel . 3)
                  ("~/GTD/someday.org" :level . 1)
                  ("~/GTD/tickler.org" :maxlevel . 2)
                  ("~/GTD/canceled.org" :level . 1)))

          (advice-add 'org-refile :after 'org-save-all-org-buffers)

          (setq org-capture-templates
                `(("t" "Todo [inbox]" entry
                   (file+headline "~/GTD/inbox.org" "Tasks")
                   "* TODO %i%?")
                  ("T" "Tickler" entry
                   (file+headline "~/GTD/tickler.org" "Tickler")
                   "* %i%? \n %U")))

          (define-key global-map (kbd "C-c c")
                      (lambda () (interactive) (org-capture)))

          (org-font-setup)

          (org-babel-do-load-languages
           'org-babel-load-languages
           '((emacs-lisp . t)
             (python . t)
             (ledger . t)))
          )

#+end_src

** org-roam
Roam is a note taking tool for connecting different entries (See [[https://roamresearch.com/#/app/help/page/dZ72V0Ig6][White Paper]]).
| key     | function               |
|---------+------------------------|
| ~C-c n l~ | org-roam buffer toggle |
| ~C-c n f~ | find org-roam node     |
| ~C-c n i~ | insert org-roam node   |

#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    (setq org-roam-dailies-directory "journal/")
    (setq org-roam-dailies-capture-templates
          '(("d" "default" entry "* %<%I:%M %p>: %?"
             :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))

    :custom
    (org-roam-directory "~/RoamNotes")
    (org-roam-completion-everywhere t)
    (org-roam-capture-templates
     '(("d" "default" plain
        "%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)
       ("p" "paper notes" plain
        "\n* Source\n\nAuthor: %^{Author}\nTitle: ${title}\nYear: %^{Year} \n\n* Summary\n\n%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)))

    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies)
    (org-roam-db-autosync-mode)
    (org-roam-setup))

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

* Interaction
** vertico
#+begin_src emacs-lisp
  (use-package vertico
    :diminish
    :init
    (setq vertico-cycle t)
    (setq vertico-resize nil)
    (vertico-mode))

  (use-package vertico-directory
    :after vertico
    :ensure nil
    :bind (:map vertico-map
                ("RET" . vertico-directory-enter)
                ("DEL" . vertico-directory-delete-char)
                ("M-DEL" . vertico-directory-delete-word))
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

** orderless
#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** consult
#+begin_src emacs-lisp
  (use-package consult
    :diminish
    :bind
    ("M-s M-g" . consult-grep)
    ("M-s M-f" . consult-find)
    ("M-s M-o" . consult-outline)
    ("M-s M-l" . consult-line)
    ("M-s M-b" . consult-buffer)
    (:map consult-narrow-map
          ("?" . consult-narrow-help)))
#+end_src

** marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :config
    (marginalia-mode 1))
#+end_src

** corfu
Using ~C-t~ to toggle popup information on candidates
#+begin_src emacs-lisp
  (use-package corfu
    :diminish
    :custom
    (corfu-auto t)

    :bind
    (:map corfu-map
          ("RET" . nil))

    :init
    (global-corfu-mode))

  (use-package corfu-popupinfo
    :after corfu
    :ensure nil
    :hook
    (corfu-mode . corfu-popupinfo-mode)
    :custom
    (corfu-popupinfo-delay nil)
    :bind
    (:map corfu-popupinfo-map
          ("C-t" . corfu-popupinfo-toggle)))
#+end_src

** embark
#+begin_src emacs-lisp
  (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc. You may adjust the
    ;; Eldoc strategy, if you want to see the documentation from
    ;; multiple providers. Beware that using this can be a little
    ;; jarring since the message shown in the minibuffer can be more
    ;; than one line, causing the modeline to move up and down:

    ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** sort-tab
Using ~sort-tab~ to handle buffers
#+begin_src emacs-lisp
  (use-package sort-tab
    :load-path"plugins/sort-tab/"
    :commands sort-tab-mode
    :config (sort-tab-mode 1))
#+end_src

** Window management
Using ~ace-window~ to deal with multiple windows. Pressing ~M-o~ to call ~ace-window~ and choose the window by a key when there are more than three windows.
#+begin_src emacs-lisp
  ;;; ace-window
  (use-package ace-window
    :ensure
    :bind
    ("M-o" . ace-window)
    :delight
    :config
    (ace-window-display-mode 1))
#+end_src

* Theme and looks
** emacs-dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :demand t
    :config
    (dashboard-setup-startup-hook)

    :custom
    (dashboard-startup-banner 'logo);; Content is not centered by default. To center, set
    (dashboard-center-content t)
    ;; vertically center content
    (dashboard-vertically-center-content t)
    (dashboard-items '((bookmarks . 5)
                       (projects . 5)
                       (agenda . 8)))

    :bind
    (:map dashboard-mode-map
          ("R" . dashboard-refresh-buffer))
    )
#+end_src

** Icons fonts
#+begin_src emacs-lisp
    (use-package all-the-icons
      :if (display-graphic-p)
      :ensure t)

    (use-package nerd-icons
      :if (display-graphic-p))
#+end_src

** Theme
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

  (use-package doom-themes
    :init (load-theme 'doom-nova t))

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Highlight-line color
#+begin_src emacs-lisp
  (set-face-background hl-line-face "SystemHilight")
#+end_src

* Misc
** Enable dir-locals in remote
#+begin_src emacs-lisp
  (setq enable-remote-dir-locals t)
#+end_src

** git-timemachine
Walk through git commits.
#+begin_src emacs-lisp
  (use-package git-timemachine)
#+end_src

#+begin_src emacs-lisp

  ;;; configuration for terminals

  (use-package term
    :config
    (setq explicit-shell-file-name "bash")
    (setq term-prompt-regexp "^[^#?%>\n]*[#$%] *"))

  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))

  (use-package clang-format)

  (defun kix6/configure-eshell ()
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    (setq eshell-history-siez 10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell
    :hook (eshell-first-time-mode . kix6/configure-eshell)
    :config
    (eshell-git-prompt-use-theme 'robbyrussell)
    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("top" "zsh" "vim" "htop"))))

  (use-package undo-tree)
#+end_src
