#+TITLE: Emacs Configuration
#+AUTHOR: kix6

* Development
** Treemacs

** Git

** Eglot

** Languages
*** Python
Install ~conda.el~
#+begin_src emacs-lisp
  ;; (use-package conda
  ;;   :config
  ;;   (conda-env-initialize-interactive-shells)
  ;;   (conda-env-initialize-eshell))
#+end_src
** Remote development
Using ~tramp~ for remote development.
#+begin_src emacs-lisp
  (use-package tramp
    :config
    (when (eq system-type 'windows-nt)
      (progn
	(dolist (method tramp-methods)
	  (if (string= "ssh"
		       (cadr (assoc 'tramp-login-program (cdr method))))
	      (push '("-tt")
		    (cadr (assoc 'tramp-login-args
				 method)))
	    nil))
	(prefer-coding-system 'utf-8-unix)))
      (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
    )
#+end_src

#+RESULTS:
: t

** Treesit
Use treesit for major modes
#+begin_src emacs-lisp
  (use-package treesit-auto
    :custom
    (treesit-auto-install 'prompt)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))
#+end_src

* Org-mode
** Faces
#+begin_src emacs-lisp
      (defun org-mode-setup ()
        (org-indent-mode)
        (variable-pitch-mode 1)
        (auto-fill-mode 0)
        (visual-line-mode 1))
#+end_src 

** Fonts
#+begin_src emacs-lisp
      (defun org-font-setup ()
        ;; Replace list hyphen with dot
        (font-lock-add-keywords 'org-mode
                                '(("^ *\\([-]\\) "
                                   (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

        ;; Set faces for heading levels
        (dolist (face '((org-level-1 . 1.2)
                        (org-level-2 . 1.1)
                        (org-level-3 . 1.05)
                        (org-level-4 . 1.0)
                        (org-level-5 . 1.0)
                        (org-level-6 . 1.0)
                        (org-level-7 . 1.0)
                        (org-level-8 . 1.0)))
          (set-face-attribute (car face) nil :weight 'regular :height (cdr face)))

        ;; Ensure that anything that should be fixed-pitch in Org files appears that way
        (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
        (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
        (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
        (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
        (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
        (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
        (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+end_src

** org-mode settings
Inlcuding ~org-contrib~ packages
#+begin_src emacs-lisp
  (use-package org-contrib)
  (use-package ledger-mode)
#+end_src

Configuring ~org-mode~ keybindings
| key         | function         |
|-------------+------------------|
| ~M-S-<right>~ | insert column    |
| ~M-S-<left>~  | delete column    |
| ~M-S-<up>~    | kill row         |
| ~C-c c~       | Capture template |

#+begin_src emacs-lisp
    (defun org-mode-setup ()
      (org-indent-mode)
      (variable-pitch-mode 1)
      (auto-fill-mode 0)
      (visual-line-mode 1))

    (use-package org
      :hook (org-mode . org-mode-setup)
      :bind
      (:map org-mode-map
            ("M-S-<right>" . org-table-insert-column)
            ("M-S-<left>" . org-table-delete-column)
            ("M-S-<up>" . org-table-kill-row))

      :config
      (setq org-ellipsis " ▾"
            org-hide-emphasis-markers t)

      (setq org-agenda-start-with-log-mode t)
      (setq org-log-done 'time)
      (setq org-log-into-drawer t)

      (require 'org-habit)

      (setq org-agenda-files
            '("~/GTD/inbox.org"
              "~/GTD/gtd.org"
              "~/GTD/tickler.org"))


      (setq org-todo-keywords
            '((sequence "TODO(t)" "NEXT(n)" "WAITING(w)" "|" "DONE(d!) CANCLED(c)")))

      (setq org-refile-targets
            '(("~/GTD/gtd.org" :maxlevel . 3)
              ("~/GTD/someday.org" :level . 1)
              ("~/GTD/tickler.org" :maxlevel . 2)))

      (advice-add 'org-refile :after 'org-save-all-org-buffers)

      (setq org-capture-templates
            `(("t" "Todo [inbox]" entry
               (file+headline "~/GTD/inbox.org" "Tasks")
               "* TODO %i%?")
              ("T" "Tickler" entry
               (file+headline "~/GTD/tickler.org" "Tickler")
               "* %i%? \n %U")))

      (define-key global-map (kbd "C-c c")
                  (lambda () (interactive) (org-capture)))

      (org-font-setup)

      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
         (python . t)
         (ledger . t)))
      )

#+end_src

** org-roam
Roam is a note taking tool for connecting different entries (See [[https://roamresearch.com/#/app/help/page/dZ72V0Ig6][White Paper]]).
| key     | function               |
|---------+------------------------|
| ~C-c n l~ | org-roam buffer toggle |
| ~C-c n f~ | find org-roam node     |
| ~C-c n i~ | insert org-roam node   |

#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    (setq org-roam-dailies-directory "journal/")
    (setq org-roam-dailies-capture-templates
          '(("d" "default" entry "* %<%I:%M %p>: %?"
             :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))

    :custom
    (org-roam-directory "~/RoamNotes")
    (org-roam-completion-everywhere t)
    (org-roam-capture-templates
     '(("d" "default" plain
        "%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)
       ("p" "paper notes" plain
        "\n* Source\n\nAuthor: %^{Author}\nTitle: ${title}\nYear: %^{Year}\n\n* Summary\n\n%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)))

    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies)
    (org-roam-db-autosync-mode)
    (org-roam-setup))

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

* Interaction
** Ivy
** sort-tab
Using ~sort-tab~ to handle buffers
#+begin_src emacs-lisp
  (use-package sort-tab
    :load-path"plugins/sort-tab/"
    :commands sort-tab-mode
    :config (sort-tab-mode 1))
#+end_src

* Theme and looks
** Icons fonts
#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))

  (use-package nerd-icons
    :if (display-graphic-p))
#+end_src

** Theme
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

  (use-package doom-themes
    :init (load-theme 'doom-nova t))

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* Misc
#+begin_src emacs-lisp
  (use-package treemacs
    :bind ("M-0" . treemacs-select-window))

  ;;; ivy and swiper
  (use-package swiper)

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    ;; Uncomment the following line to have sorting remembered across sessions!
                                          ;(prescient-persist-mode 1)
    (ivy-prescient-mode 1))

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom (projectile-completion-system 'ivy)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))

  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;;; Language servers

  (use-package eglot
    :hook
    (python-mode . eglot-ensure)
    (c-mode . eglot-ensure)
    (rust-mode . eglot-ensure)
    (c++-mode . eglot-ensure))

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind
    (:map company-active-map
          ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

  ;;; configuration for terminals

  (use-package term
    :config
    (setq explicit-shell-file-name "bash")
    (setq term-prompt-regexp "^[^#?%>\n]*[#$%] *"))

  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))

  (use-package clang-format)

  (defun kix6/configure-eshell ()
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    (setq eshell-history-siez 10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt)

  (use-package eshell
    :hook (eshell-first-time-mode . kix6/configure-eshell)
    :config
    (eshell-git-prompt-use-theme 'robbyrussell)
    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("top" "zsh" "vim" "htop"))))

  ;;; for OCaml
  (use-package ocp-indent)
  (use-package tuareg
    :init (setq auto-mode-alist (append '(("\\.ml[ip]?$" . tuareg-mode) ("\\.topml$" . tuareg-mode) ("\\.ml[yl]" . tuareg-menhir-mode)) auto-mode-alist)))

  (use-package dune)

  (use-package merlin
    :init (setq merlin-opam-bin-path "/home/kix6/.opam/4.14.0/bin/ocamlmerlin")
    :hook ((tuareg-mode) . merlin-mode))

  (use-package merlin-eldoc
    :ensure t
    :hook ((tuareg-mode) . merlin-eldoc-setup))

  (use-package flycheck-ocaml
    :ensure t
    :config
    (flycheck-ocaml-setup))

  (use-package utop
    :ensure t
    :config
    (add-hook 'tuareg-mode-hook #'utop-minor-mode))

  (use-package merlin-company)

  ;;; ace-window
  (use-package ace-window
    :ensure
    :bind
    ("M-o" . ace-window)
    :delight
    :config
    (ace-window-display-mode 1))

  (use-package git-timemachine)

  (use-package undo-tree)

  ;;; config for rust
  (use-package rustic
    :ensure
    :bind (:map rustic-mode-map
                ("M-j" . lsp-ui-imenu)
                ("M-?" . lsp-find-references)
                ("C-c C-c l" . flycheck-list-errors)
                ("C-c C-c a" . lsp-execute-code-action)
                ("C-c C-c q" . lsp-workspace-restart)
                ("C-c C-c Q" . lsp-workspace-shutdown)
                ("C-c C-c s" . lsp-rust-analyzer-status))
    :hook
    (rustic-mode-hook . rk/rustic-mode-hook)
    :custom
    (rustic-format-on-save t))

  (defun rk-rustic-mode-hook ()
    (when buffer-file-name
      (setq-local buffer-save-without-query t))
    (add-hook 'before-save-hook 'lsp-format-buffer nil t))

  ;;; Configuration for TRAMP

  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(package-selected-packages
     '(ledger-mode ob-ledger utop flycheck-ocaml merlin-eldoc merlin-mode ocp-indent json-mode flycheck undo-tree git-timemachine merlin-company merlin tuareg clang-format eshell-git-prompt ansi-term-mode ansi-term eterm-256color which-key use-package rainbow-delimiters magit lsp-ui lsp-metals lsp-ivy ivy-rich ivy-prescient helpful doom-themes doom-modeline counsel-projectile company-box)))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )
  ;; ## added by OPAM user-setup for emacs / base ## 56ab50dc8996d2bb95e7856a6eddb17b ## you can edit, but keep this line
  ;; (require 'opam-user-setup "~/.emacs.d/opam-user-setup.el")
  ;; ## end of OPAM user-setup addition for emacs / base ## keep this line
#+end_src
